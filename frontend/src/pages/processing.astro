---
import BaseLayout from '../layouts/BaseLayout.astro';
import { Progress } from '../components/ui/progress';
import { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';
import { Badge } from '../components/ui/badge';

// Get job ID from query parameters
const jobId = Astro.url.searchParams.get('job');

if (!jobId) {
  return Astro.redirect('/', 302);
}

// Simulate processing status for demo
const hasError = false;
const errorMessage = '';

// For demo purposes, simulate a processing state
const currentProgress = 45;
const currentStep: string = 'parsing';

const processingSteps = [
  { id: 'upload', label: 'Soubor nahrán', completed: true },
  { id: 'validation', label: 'Kontrola formátu souboru', completed: currentProgress >= 20 },
  { id: 'parsing', label: 'Načítání dat', completed: currentProgress >= 40, current: currentStep === 'parsing' },
  { id: 'processing', label: 'Zpracování dat', completed: currentProgress >= 70, current: currentStep === 'processing' },
  { id: 'generation', label: 'Generování výsledků', completed: currentProgress >= 90, current: currentStep === 'generation' },
];

const progress = currentProgress;

// Note: In production, this would be handled by actual job processing
---

<BaseLayout title="Zpracování souboru" currentStep="processing">
  <div class="container mx-auto py-8 space-y-8">
    <div class="text-center">
      <h1 class="text-4xl font-bold tracking-tight mb-4">Zpracování vašeho souboru</h1>
      <p class="text-lg text-muted-foreground">
        Váš soubor se zpracovává. Tato stránka se automaticky aktualizuje s průběhem.
      </p>
    </div>
    
    <div class="max-w-4xl mx-auto space-y-8">
      <!-- Job ID Display -->
      <Card>
        <CardContent className="p-6">
          <div class="flex items-center gap-4">
            <span class="font-medium text-muted-foreground">Job ID:</span>
            <code class="flex-1 font-mono text-sm bg-muted px-3 py-1 rounded border" id="job-id">{jobId}</code>
            <button 
              type="button" 
              class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 w-9"
              id="copy-job-id" 
              aria-label="Copy job ID"
            >
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
              </svg>
            </button>
          </div>
        </CardContent>
      </Card>
      
      <!-- Progress Bar -->
      <Card>
        <CardHeader>
          <CardTitle className="flex justify-between items-center">
            <span>Celkový průběh</span>
            <span class="text-primary font-semibold" id="progress-percentage">{progress}%</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <Progress value={progress} className="w-full" client:load />
        </CardContent>
      </Card>
      
      <!-- Processing Steps -->
      <Card>
        <CardHeader>
          <CardTitle>Kroky zpracování</CardTitle>
        </CardHeader>
        <CardContent>
          <ul class="space-y-4" role="list">
            {processingSteps.map((step, index) => (
              <li class="flex items-center gap-4" role="listitem">
                <div class="flex items-center justify-center w-8 h-8 rounded-full border-2 flex-shrink-0" aria-hidden="true">
                  {step.completed ? (
                    <div class="bg-primary border-primary text-primary-foreground rounded-full w-full h-full flex items-center justify-center">
                      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <polyline points="20,6 9,17 4,12"></polyline>
                      </svg>
                    </div>
                  ) : step.current ? (
                    <div class="bg-primary border-primary text-primary-foreground rounded-full w-full h-full flex items-center justify-center">
                      <div class="animate-spin">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                          <circle cx="12" cy="12" r="10"></circle>
                          <path d="M12 2a10 10 0 0 1 10 10"></path>
                        </svg>
                      </div>
                    </div>
                  ) : (
                    <div class="border-muted-foreground text-muted-foreground rounded-full w-full h-full flex items-center justify-center">
                      <span class="text-sm font-semibold">{index + 1}</span>
                    </div>
                  )}
                </div>
                <div class="flex-1">
                  <span class={`font-medium ${step.completed ? 'text-primary' : step.current ? 'text-primary' : 'text-muted-foreground'}`}>
                    {step.label}
                  </span>
                  {step.current && (
                    <div class="text-sm text-muted-foreground" aria-live="polite">Probíhá...</div>
                  )}
                </div>
                {step.completed && (
                  <Badge variant="default" className="bg-primary/10 text-primary">Dokončeno</Badge>
                )}
                {step.current && (
                  <Badge variant="secondary">Probíhá</Badge>
                )}
              </li>
            ))}
          </ul>
        </CardContent>
      </Card>
      
      <!-- Error State (if needed) -->
      {hasError && (
        <Card className="border-destructive">
          <CardContent className="p-6">
            <div class="flex gap-4" role="alert">
              <div class="text-destructive flex-shrink-0" aria-hidden="true">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <circle cx="12" cy="12" r="10"></circle>
                  <line x1="15" y1="9" x2="9" y2="15"></line>
                  <line x1="9" y1="9" x2="15" y2="15"></line>
                </svg>
              </div>
              <div class="flex-1">
                <h3 class="text-lg font-semibold text-destructive mb-2">Zpracování selhalo</h3>
                <p class="text-muted-foreground mb-4">
                  {errorMessage || 'Při zpracování vašeho souboru došlo k chybě. Zkuste prosím nahrát soubor znovu nebo kontaktujte podporu.'}
                </p>
                <div class="flex gap-3">
                  <a href="/" class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2">
                    Zkusit znovu
                  </a>
                  <button type="button" class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-secondary text-secondary-foreground hover:bg-secondary/80 h-10 px-4 py-2" id="contact-support">
                    Kontaktovat podporu
                  </button>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
      
      <!-- Actions -->
      <div class="flex justify-center gap-4">
        <button type="button" class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-secondary text-secondary-foreground hover:bg-secondary/80 h-10 px-4 py-2" id="refresh-status">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" class="mr-2">
            <polyline points="23,4 23,10 17,10"></polyline>
            <polyline points="1,20 1,14 7,14"></polyline>
            <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4-4.64 4.36A9 9 0 0 1 3.51 15"></path>
          </svg>
          Obnovit stav
        </button>
        
        <a href="/" class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2">
          Začít nové nahrávání
        </a>
      </div>
    </div>
    
    <!-- Auto-refresh notification -->
    <div class="flex items-center justify-center gap-2 text-sm text-muted-foreground bg-muted p-3 rounded-lg max-w-md mx-auto">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
        <circle cx="12" cy="12" r="10"></circle>
        <path d="M12 6v6l4 2"></path>
      </svg>
      Tato stránka se automaticky obnovuje každých 5 sekund
    </div>
  </div>
</BaseLayout>

<script>
  document.addEventListener('astro:page-load', () => {
    const copyBtn = document.getElementById('copy-job-id');
    const jobId = document.getElementById('job-id');
    const refreshBtn = document.getElementById('refresh-status');
    
    // Copy job ID functionality
    if (copyBtn && jobId) {
      copyBtn.addEventListener('click', async () => {
        try {
          await navigator.clipboard.writeText(jobId.textContent || '');
          
          // Visual feedback
          const originalHTML = copyBtn.innerHTML;
          copyBtn.innerHTML = `
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <polyline points="20,6 9,17 4,12"></polyline>
            </svg>
          `;
          copyBtn.style.color = 'var(--color-success)';
          
          setTimeout(() => {
            copyBtn.innerHTML = originalHTML;
            copyBtn.style.color = '';
          }, 2000);
        } catch (err) {
          console.error('Failed to copy job ID:', err);
        }
      });
    }
    
    // Manual refresh functionality
    if (refreshBtn) {
      refreshBtn.addEventListener('click', () => {
        window.location.reload();
      });
    }
    
    // Auto-refresh functionality (progressive enhancement)
    let autoRefreshInterval: number;
    
    function startAutoRefresh() {
      autoRefreshInterval = window.setInterval(() => {
        // In a real app, you would make an API call to check status
        // For now, just reload the page
        window.location.reload();
      }, 5000);
    }
    
    function stopAutoRefresh() {
      if (autoRefreshInterval) {
        clearInterval(autoRefreshInterval);
      }
    }
    
    // Start auto-refresh
    startAutoRefresh();
    
    // Stop auto-refresh when page is hidden (performance optimization)
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) {
        stopAutoRefresh();
      } else {
        startAutoRefresh();
      }
    });
    
    // Clean up on page leave
    window.addEventListener('beforeunload', () => {
      stopAutoRefresh();
    });
  });
</script>
