---
import BaseLayout from "../layouts/BaseLayout.astro";
import { Card, CardContent, CardHeader, CardTitle } from "../components/ui/card";
import { Button } from "../components/ui/button";
import { Badge } from "../components/ui/badge";
import { ORCHESTRATION_API_URL } from "../constants";

// Get job ID from query parameters
const jobId = Astro.url.searchParams.get("job");

if (!jobId) {
  return Astro.redirect("/", 302);
}

// Get validation result from backend API
let validationData = null;

try {
  const response = await fetch(`${ORCHESTRATION_API_URL}/documents/status/${jobId}`);
  if (response.ok) {
    const result = await response.json();
    validationData = result.validationResult;
  }
} catch (error) {
  console.error("Error fetching validation data:", error);
}
---

<BaseLayout title="Stažení výsledků" currentStep="download">
  <div class="container mx-auto py-8">
      <>
        <div class="text-center mb-8">
          <div class="text-primary w-20 h-20 mx-auto mb-6" aria-hidden="true">
            <svg width="80" height="80" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
              <polyline points="22,4 12,14.01 9,11.01"></polyline>
            </svg>
          </div>
          <h1 class="text-4xl font-bold tracking-tight mb-4">Zpracování dokončeno!</h1>
          <p class="text-lg text-muted-foreground">
            Váš soubor byl úspěšně zpracován. Stáhněte si výsledky níže.
          </p>
        </div>
    
        <div class="max-w-6xl mx-auto space-y-8">
          <Card>
            <CardHeader>
              <CardTitle>Stažení souborů</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <!-- Excel Download - Primary Option -->
              {validationData && validationData.extracted_data && validationData.extracted_data.length > 0 && (
                <div class="flex items-center justify-between p-4 border border-primary bg-primary/5 rounded-lg">
                  <div class="flex items-center gap-4 flex-1">
                    <div class="text-primary" aria-hidden="true">
                      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                        <polyline points="14,2 14,8 20,8"></polyline>
                        <path d="M8 13h2m-2 4h4m-4-8h4"></path>
                      </svg>
                    </div>
                    <div class="flex-1">
                      <h3 class="font-semibold">Excel soubor s extrahovanými daty</h3>
                      <p class="text-sm text-muted-foreground mb-1">Strukturovaná data z PDF organizovaná podle kódů odpadů</p>
                      <div class="flex gap-4 text-sm text-muted-foreground">
                        <span class="font-mono">odpady_{jobId}_{new Date().toISOString().split('T')[0]}.xlsx</span>
                    <Badge variant="default">Více listů</Badge>
                      </div>
                    </div>
                  </div>
                  <a id="excel-download-link" href="#" download class="inline-flex items-center justify-center gap-2 px-4 py-2 text-sm font-medium text-white bg-primary rounded-md hover:bg-primary/90 transition-colors">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" class="mr-2">
                      <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                      <polyline points="7,10 12,15 17,10"></polyline>
                      <line x1="12" y1="15" x2="12" y2="3"></line>
                    </svg>
                    <span id="excel-download-text">Stáhnout Excel</span>
                  </a>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </>
  </div>
</BaseLayout>

<script>
  async function generateExcelFile() {
    console.log('=== DOWNLOAD PAGE LOADED ===');
    console.log('User agent:', navigator.userAgent);
    console.log('Page URL:', window.location.href);
    console.log('Document ready state:', document.readyState);
    
    // Generate Excel file when page loads
    const jobId = new URLSearchParams(window.location.search).get('job');
    console.log('JobId from URL:', jobId);
    
    if (jobId) {
      try {
        console.log('Starting Excel file generation for job:', jobId);
        console.log('Making POST request to /api/generate-excel...');
        
        const response = await fetch('/api/generate-excel', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ jobId }),
        });

        console.log('Response received:');
        console.log('- Status:', response.status);
        console.log('- Status text:', response.statusText);
        console.log('- Headers:', Object.fromEntries(response.headers.entries()));

        if (response.ok) {
          const result = await response.json();
          console.log('SUCCESS: Excel file generated');
          console.log('- Filename:', result.filename);
          console.log('- Download URL:', result.downloadUrl);
          console.log('- Full result:', result);
          
          // Store the download URL for later use
          const excelData = {
            filename: result.filename,
            downloadUrl: result.downloadUrl,
            timestamp: Date.now()
          };
          
          sessionStorage.setItem(`excel_${jobId}`, JSON.stringify(excelData));
          console.log('Excel data stored in sessionStorage:', excelData);
          
          // Verify storage
          const stored = sessionStorage.getItem(`excel_${jobId}`);
          console.log('Verification - stored data:', stored);
          
          // Update the download link immediately after generation
          updateExcelDownloadLink(jobId);
        } else {
          console.error('ERROR: Failed to generate Excel file');
          console.error('- Status:', response.status);
          console.error('- Status text:', response.statusText);
          
          try {
            const errorText = await response.text();
            console.error('- Response body:', errorText);
          } catch (e) {
            console.error('- Could not read response body:', e);
          }
        }
      } catch (error) {
        console.error('EXCEPTION: Error generating Excel file');
        console.error('- Error type:', typeof error);
        console.error('- Error message:', error instanceof Error ? error.message : String(error));
        console.error('- Error stack:', error instanceof Error ? error.stack : 'No stack available');
        console.error('- Full error object:', error);
      }
    } else {
      console.warn('No jobId found in URL parameters');
      console.log('Current URL:', window.location.href);
      console.log('Search params:', window.location.search);
    }
    
    console.log('=== DOWNLOAD PAGE EXCEL GENERATION COMPLETE ===');
  }

  function updateExcelDownloadLink(jobId: string | null) {
    const excelDownloadLink = document.getElementById('excel-download-link');
    const excelDownloadText = document.getElementById('excel-download-text');
    
    if (jobId && excelDownloadLink && excelDownloadText) {
      // Check if Excel file was generated
      const excelData = sessionStorage.getItem(`excel_${jobId}`);
      
      if (excelData) {
        try {
          const { filename, downloadUrl } = JSON.parse(excelData);
          (excelDownloadLink as HTMLAnchorElement).href = downloadUrl;
          (excelDownloadLink as HTMLAnchorElement).download = filename;
          excelDownloadText.textContent = 'Stáhnout Excel';
          excelDownloadLink.style.opacity = '1';
          excelDownloadLink.style.pointerEvents = 'auto';
        } catch (error) {
          console.error('Error parsing Excel data from sessionStorage:', error);
          excelDownloadText.textContent = 'Excel nedostupný';
          excelDownloadLink.style.opacity = '0.5';
          excelDownloadLink.style.pointerEvents = 'none';
        }
      } else {
        // Excel file not ready yet
        excelDownloadText.textContent = 'Excel se připravuje...';
        excelDownloadLink.style.opacity = '0.5';
        excelDownloadLink.style.pointerEvents = 'none';
        
        // Check again after a short delay
        setTimeout(() => {
          const excelDataRetry = sessionStorage.getItem(`excel_${jobId}`);
          
          if (excelDataRetry) {
            try {
              const { filename, downloadUrl } = JSON.parse(excelDataRetry);
              (excelDownloadLink as HTMLAnchorElement).href = downloadUrl;
              (excelDownloadLink as HTMLAnchorElement).download = filename;
              excelDownloadText.textContent = 'Stáhnout Excel';
              excelDownloadLink.style.opacity = '1';
              excelDownloadLink.style.pointerEvents = 'auto';
            } catch (error) {
              console.error('Error parsing Excel data from sessionStorage on retry:', error);
            }
          } else {
            excelDownloadText.textContent = 'Excel nedostupný';
          }
        }, 2000);
      }
    }
  }

  document.addEventListener('astro:page-load', () => {
    const downloadAllBtn = document.getElementById('download-all');
    const shareResultsBtn = document.getElementById('share-results');
    const saveToAccountBtn = document.getElementById('save-to-account');
    
    // Get job ID from URL
    const jobId = new URLSearchParams(window.location.search).get('job');
    
    // Generate Excel file when page loads
    generateExcelFile();
    
    // Set up Excel download link (will be updated after generation)
    updateExcelDownloadLink(jobId);
  });

  // Try multiple event listeners to ensure the script runs
  document.addEventListener('DOMContentLoaded', generateExcelFile);
  
  // If the page is already loaded, run immediately
  if (document.readyState === 'loading') {
    // Document still loading
  } else {
    // Document already loaded
    generateExcelFile();
  }

  document.addEventListener('astro:page-load', () => {
    const downloadAllBtn = document.getElementById('download-all');
    const shareResultsBtn = document.getElementById('share-results');
    const saveToAccountBtn = document.getElementById('save-to-account');

    // Download all files functionality
    if (downloadAllBtn) {
      downloadAllBtn.addEventListener('click', () => {
        // In a real implementation, this would create a ZIP file or trigger multiple downloads
        const downloadLinks = document.querySelectorAll('.download-btn');
        
        downloadLinks.forEach((link, index) => {
          setTimeout(() => {
            (link as HTMLAnchorElement).click();
          }, index * 500); // Stagger downloads to avoid browser blocking
        });
      });
    }
    
    // Share results functionality
    if (shareResultsBtn) {
      shareResultsBtn.addEventListener('click', () => {
        // In a real implementation, this would generate a shareable link
        if (navigator.share) {
          navigator.share({
            title: 'Processing Results',
            text: 'Check out my file processing results',
            url: window.location.href
          }).catch(console.error);
        } else {
          // Fallback: copy URL to clipboard
          navigator.clipboard.writeText(window.location.href).then(() => {
            alert('Link copied to clipboard!');
          }).catch(console.error);
        }
      });
    }
    
    // Save to account functionality
    if (saveToAccountBtn) {
      saveToAccountBtn.addEventListener('click', () => {
        // In a real implementation, this would save results to user account
        alert('This feature would save results to your account for later access.');
      });
    }
  });

</script>
